import datetime
import os.path
from typing import List, Optional

from fastapi import FastAPI, HTTPException, status
from pydantic import BaseModel, Field

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv

# --- Google API Configuration ---
# If modifying these scopes, delete the file token.json.
# IMPORTANT: For adding/deleting events, you need 'https://www.googleapis.com/auth/calendar'
# SCOPES = [
#     "https://www.googleapis.com/auth/calendar",  # Full access for adding/deleting
#     "https://www.googleapis.com/auth/gmail.readonly" # Keep if you still need Gmail
# ]

load_dotenv()
TOKEN_FILE = "token.json"
CREDENTIALS_FILE = "credentials.json"

def get_google_calendar_service():
    """
    Handles Google authentication and returns a Google Calendar API service object.
    """
    creds = None
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, os.getenv("SCOPES.GMAIL"))

    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            print("No valid token.json found or token expired. Starting new authentication flow...")
            flow = InstalledAppFlow.from_client_secrets_file(
                CREDENTIALS_FILE, os.getenv("SCOPES.GMAIL")
            )
            # You might need to change the port if 0 doesn't work consistently
            # or if you are running other services on common ports.
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(TOKEN_FILE, "w") as token:
            token.write(creds.to_json())

    try:
        service = build("calendar", "v3", credentials=creds)
        return service
    except HttpError as error:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An error occurred with Google Calendar API: {error}"
        )

# --- FastAPI Application ---
app = FastAPI(
    title="Google Calendar MCP",
    description="FastAPI server for managing Google Calendar events.",
    version="1.0.0"
)

# --- Pydantic Models for Request Bodies and Responses ---

class EventTime(BaseModel):
    dateTime: Optional[datetime.datetime] = None
    date: Optional[datetime.date] = None
    timeZone: str = Field(default="UTC", description="Timezone (e.g., 'America/New_York', 'UTC')")

    def to_dict(self):
        if self.dateTime:
            return {"dateTime": self.dateTime.isoformat(), "timeZone": self.timeZone}
        elif self.date:
            return {"date": self.date.isoformat(), "timeZone": self.timeZone}
        return {} # Should not happen with validation

class CalendarEventBase(BaseModel):
    summary: str = Field(..., description="Summary or title of the event")
    location: Optional[str] = None
    description: Optional[str] = None
    start: EventTime
    end: EventTime
    # You can add more fields like attendees, recurrence, reminders, etc.

class CalendarEventCreate(CalendarEventBase):
    pass

class CalendarEventResponse(CalendarEventBase):
    id: str
    htmlLink: str
    status: str

# --- API Endpoints ---

@app.get("/")
async def read_root():
    return {"message": "Welcome to the Google Calendar MCP FastAPI server!"}

@app.get("/events/upcoming", response_model=List[CalendarEventResponse])
async def get_upcoming_events(max_results: int = 10, calendar_id: str = "primary"):
    """
    Fetches the next N upcoming events from the specified calendar.
    """
    service = get_google_calendar_service()
    now = datetime.datetime.now(tz=datetime.timezone.utc).isoformat()
    try:
        events_result = (
            service.events()
            .list(
                calendarId=calendar_id,
                timeMin=now,
                maxResults=max_results,
                singleEvents=True,
                orderBy="startTime",
            )
            .execute()
        )
        events = events_result.get("items", [])
        return [CalendarEventResponse(id=event['id'], htmlLink=event['htmlLink'], status=event['status'],
                                     summary=event['summary'], location=event.get('location'),
                                     description=event.get('description'),
                                     start=EventTime(dateTime=event['start'].get('dateTime'), date=event['start'].get('date'), timeZone=event['start'].get('timeZone', 'UTC')),
                                     end=EventTime(dateTime=event['end'].get('dateTime'), date=event['end'].get('date'), timeZone=event['end'].get('timeZone', 'UTC'))
                                     ) for event in events]
    except HttpError as error:
        raise HTTPException(
            status_code=error.resp.status,
            detail=f"Error fetching upcoming events: {error.content.decode()}"
        )

@app.get("/events/range", response_model=List[CalendarEventResponse])
async def get_events_in_range(
    start_time: datetime.datetime,
    end_time: datetime.datetime,
    calendar_id: str = "primary",
    max_results: int = 250
):
    """
    Fetches events within a specified date/time range.
    """
    service = get_google_calendar_service()
    try:
        events_result = (
            service.events()
            .list(
                calendarId=calendar_id,
                timeMin=start_time.isoformat(),
                timeMax=end_time.isoformat(),
                maxResults=max_results,
                singleEvents=True,
                orderBy="startTime",
            )
            .execute()
        )
        events = events_result.get("items", [])
        return [CalendarEventResponse(id=event['id'], htmlLink=event['htmlLink'], status=event['status'],
                                     summary=event['summary'], location=event.get('location'),
                                     description=event.get('description'),
                                     start=EventTime(dateTime=event['start'].get('dateTime'), date=event['start'].get('date'), timeZone=event['start'].get('timeZone', 'UTC')),
                                     end=EventTime(dateTime=event['end'].get('dateTime'), date=event['end'].get('date'), timeZone=event['end'].get('timeZone', 'UTC'))
                                     ) for event in events]
    except HttpError as error:
        raise HTTPException(
            status_code=error.resp.status,
            detail=f"Error fetching events in range: {error.content.decode()}"
        )


@app.post("/events", response_model=CalendarEventResponse, status_code=status.HTTP_201_CREATED)
async def add_event(event_data: CalendarEventCreate, calendar_id: str = "primary"):
    """
    Adds a new event to the specified calendar.
    Requires 'https://www.googleapis.com/auth/calendar' scope.
    """
    service = get_google_calendar_service()

    event = {
        'summary': event_data.summary,
        'location': event_data.location,
        'description': event_data.description,
        'start': event_data.start.to_dict(),
        'end': event_data.end.to_dict(),
        # You can add more event properties here as needed
        # e.g., 'attendees', 'reminders', 'recurrence'
    }

    try:
        created_event = service.events().insert(calendarId=calendar_id, body=event).execute()
        return CalendarEventResponse(id=created_event['id'], htmlLink=created_event['htmlLink'], status=created_event['status'],
                                     summary=created_event['summary'], location=created_event.get('location'),
                                     description=created_event.get('description'),
                                     start=EventTime(dateTime=created_event['start'].get('dateTime'), date=created_event['start'].get('date'), timeZone=created_event['start'].get('timeZone', 'UTC')),
                                     end=EventTime(dateTime=created_event['end'].get('dateTime'), date=created_event['end'].get('date'), timeZone=created_event['end'].get('timeZone', 'UTC'))
                                     )
    except HttpError as error:
        raise HTTPException(
            status_code=error.resp.status,
            detail=f"Error adding event: {error.content.decode()}"
        )

@app.delete("/events/{event_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_event(event_id: str, calendar_id: str = "primary"):
    """
    Deletes an event from the specified calendar by its ID.
    Requires 'https://www.googleapis.com/auth/calendar' scope.
    """
    service = get_google_calendar_service()
    try:
        service.events().delete(calendarId=calendar_id, eventId=event_id).execute()
        return {"message": "Event deleted successfully."}
    except HttpError as error:
        if error.resp.status == 404:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Event with ID '{event_id}' not found in calendar '{calendar_id}'."
            )
        else:
            raise HTTPException(
                status_code=error.resp.status,
                detail=f"Error deleting event: {error.content.decode()}"
            )

# --- How to Run ---
# 1. Save the code as 'main.py' (or any other name, just match 'module_name' below)
# 2. Make sure 'credentials.json' is in the same directory.
# 3. Open your terminal in that directory.
# 4. Run the server:
#    uvicorn main:app --reload --port 8000
# 5. Open your browser to http://localhost:8000/docs for the interactive API documentation.